#version 330 core

// Light and Material Uniform Variables
uniform float materialAmbient; // Ambient Term - ka
uniform float materialDiffuse; // Diffuse Term - kd
uniform float materialSpecular; // Specular Term - ks
uniform float materialExponent; // Specular Exponent - n

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: Constant  y: Linear  z: Quadratic

uniform sampler2D myTextureSampler;

// Inputs
in vec2 UV;
in vec4 v_color;         // vertex color: also diffuse color
in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space

// Ouput data
out vec4 color;


void main ()
{
  float distance = length(lightVector);
  float diffuseTerm = clamp(dot(normal, lightVector.xyz), 0, 1);
  
  float attenuation = 1;
  
  vec3 lightIntensity	= attenuation * lightColor;
  
  vec4 light = vec4(lightColor, 1);
  
  // Ambient
  vec4 ambientEquation = vec4(materialAmbient * lightColor, 1);
  
  // Diffuse
  vec4 diffuseEquation = materialDiffuse * light * diffuseTerm / distance;
  
  // Specular
  vec3 reflectanceVector = (2 * diffuseTerm * normal) - lightVector.xyz;
  float specularTerm = clamp(dot(eyeVector, reflectanceVector), 0, 1);
  vec4 specularEquation = materialSpecular * light * pow(specularTerm, materialExponent) / distance;
  
  
  color = v_color * texture( myTextureSampler, UV ) * (ambientEquation + diffuseEquation + specularEquation);
  
//  if(color.a <= 0.02f)
//    discard;
}