#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;  // position
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting // normal
layout(location = 2) in vec3 vertexColor; // color
layout(location = 3) in vec2 vertexUV;

// Output to Fragment Shader
out vec2 UV;
out vec4 v_color;
out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space

// Uniform
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light


void main()
{
  mat4 MV = ViewTransform * WorldTransform; // normal matrix
  mat4 MVP = ProjectionTransform * MV;
  
  // Output position of the vertex, in clip space : MVP * position
  gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
  v_color = vec4(vertexColor, 0.5f);
  
  // ------ Prepare Data for Fragment Shader
  
  vec4 vertexPosition_viewSpace = MV * vec4(vertexPosition_modelspace, 1);
  vec4 lightVector_viewSpace = ViewTransform * WorldLightPosition;
  
  // normal
  normal = mat3(MV) * vertexNormal_modelspace;
  normal = normalize(normal);
  
  // eyeVector
  eyeVector = vec3(0,0,0) - vertexPosition_viewSpace.xyz;
  eyeVector = normalize(eyeVector);
  
  // lightVector
  lightVector = lightVector_viewSpace - vertexPosition_viewSpace;
  lightVector = normalize(lightVector);
  
  // UV
  UV = vertexUV;
}
